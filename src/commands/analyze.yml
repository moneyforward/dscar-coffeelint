description: Analyze code statically using CoffeeLint
parameters:
  starting-points:
    description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
    type: string
    default: "."
  patterns-to-include:
    description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: '.*\.coffee$'
  patterns-to-exclude:
    description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: |
        ^\./\.git/.*
        ^\./node_modules/.*
  analysis-arguments:
    description: Arguments of analysis command
    type: string
    default: ""
  error-pattern:
    description: Specify the pattern if you want to detect analyzing errors from the standard error
    type: string
    default: '.*'
  analysis-results-path:
    description: "Specify the path to save the analysis results if you need to change it (default: /tmp/dscar/analysis-results)"
    type: string
    default: ""
  no-analysis-output-timeout:
    description: Elapsed time the command can run without output. The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
    type: string
    default: 10m
  prepare:
    description: Specify the required steps before analysis if necessary
    type: steps
    default:
      - install-analyzer
  redirecting-output:
    description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
    type: enum
    enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
    default: "/dev/null"
  max-procs:
    description: Specify the maximum number of processes to run at the same time
    type: integer
    default: 1
steps:
  - dscar/analyze:
      step-name: Analyze code statically using CoffeeLint
      analysis-name: CoffeeLint
      prepare:
        - run: sudo apt-get install jq
        - run:
            name: export TRANSFORMATION_ARGUMENTS
            command: |
              set -x

              ANALYSIS_COMMAND=coffeelint
              declare -ax ANALYSIS_ARGUMENTS=("${ANALYSIS_COMMAND}" "${ANALYSIS_ARGUMENTS[@]}")
              echo "$(declare -p ANALYSIS_ARGUMENTS)" >> $BASH_ENV

              FILTER="$(
              cat \<<-"EOT" | tr -s ' \n' ' '
              map(to_entries) | flatten | map((@html "<file name=\"\(.key)\">") + "\(.value | map(
                @html "<error source=\"\(.name)\" message=\"\(.message)\" severity=\"\(.level)\" line=\"\(.lineNumber)\" column=\"0\" />"
              ) | join(""))</file>") | "<checkstyle>\(join(""))</checkstyle>"
              EOT
              )"
              declare -ax TRANSFORMATION_ARGUMENTS=( -srM "$FILTER" )
              echo "$(declare -p TRANSFORMATION_ARGUMENTS)" >> $BASH_ENV
        - steps: << parameters.prepare >>
      analysis-command: npx
      analysis-arguments: << parameters.analysis-arguments >> -q --reporter=raw
      error-pattern: << parameters.error-pattern >>
      transformation-command: jq
      should-find: "true"
      starting-points: << parameters.starting-points >>
      patterns-to-include: << parameters.patterns-to-include >>
      patterns-to-exclude: << parameters.patterns-to-exclude >>
      analysis-results-path: << parameters.analysis-results-path >>
      no-output-timeout: << parameters.no-analysis-output-timeout >>
      redirecting-output: << parameters.redirecting-output >>
      max-procs: << parameters.max-procs >>
